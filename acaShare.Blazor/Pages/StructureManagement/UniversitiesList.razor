@*@attribute [Microsoft.AspNetCore.Components.RouteAttribute(RouteConstants.ModeratorPanelRoute + "/MaterialsToApprove")]*@
@page "/Moderator/ModeratorPanel/UniversitiesStructureManagement/Universities"
@attribute [Authorize(Roles = Roles.AdministratorRole + ", " + Roles.MainModeratorRole + ", " + Roles.ModeratorRole)]
@inject IUniversityTreeTraversalService TraversalService
@inject IUniversityTreeManagementService ManagementService
@inject IFormFilesManagement FilesManagement
@inject IMaterialsService MaterialsService
@inject NavigationManager NavigationManager

    <div class="data-container">
        <Breadcrumbs BreadcrumbsItems="@_breadcrumbsItems" />

        <div class="home-content">
            <AcaCollection Items="_universities">
                <ListItemTemplate>
                    <UniversityListItem Model="context" Modal="@ConfirmationDialog" OnDelete="OnDelete" />
                </ListItemTemplate>
            </AcaCollection>
            <NavLink href="/Moderator/ModeratorPanel/UniversitiesStructureManagement/Universities/Add" class="add-button">
                Dodaj
            </NavLink>
        </div>
    </div>

<ConfirmationDialog @ref="ConfirmationDialog">
    @ConfirmationDialog.InnerText
</ConfirmationDialog>

@code {
    private IReadOnlyCollection<UniversityViewModel> _universities;
    private const string pageTitle = "Uczelnie";
    private ConfirmationDialog ConfirmationDialog;
    private IReadOnlyCollection<BreadcrumbViewModel> _breadcrumbsItems = new List<BreadcrumbViewModel>
    {
        new BreadcrumbViewModel(pageTitle)
    };

    protected override void OnInitialized()
    {
        ChangePageTitle(pageTitle);
        RefreshData();
    }

    private void RefreshData()
    {
        _universities = TraversalService.GetUniversities()
            .Select(u => new UniversityViewModel
            {
                Id = u.UniversityId,
                TitleOrFullName = u.Name,
                SubtitleOrAbbreviation = u.Abbreviation
            })
            .ToList();
    }

    private void OnDelete(CallbackArgs callbackArgs)
    {
        var universityToDelete = TraversalService.GetUniversity(callbackArgs.Id);
        if (universityToDelete == null)
        {
            NavigationManager.NavigateTo($"ResourceNotFound/{Errors.UniversityNotFound}");
        }

        // First - delete materials due to database constraints betwee Lesson and Material
        foreach (var dept in universityToDelete.Departments)
        {
            foreach (var lesson in dept.Lessons)
            {
                foreach (var materialToDelete in lesson.Materials)
                {
                    FilesManagement.DeleteWholeMaterialFolder(materialToDelete.MaterialId);
                    MaterialsService.DeleteMaterial(materialToDelete);
                }
            }
        }

        // actually delete
        ManagementService.DeleteUniversity(universityToDelete);

        RefreshData();
    }

    [CascadingParameter]
    public Action<string> ChangePageTitle { get; set; }
}