@*@attribute [Microsoft.AspNetCore.Components.RouteAttribute(RouteConstants.ModeratorPanelRoute + "/MaterialsToApprove")]*@
@page "/Moderator/ModeratorPanel/UniversitiesStructureManagement/Universities/{UniversityId:int}/Departments/{DepartmentId:int}/Semesters/{SemesterId:int}/Subjects"
@attribute [Authorize(Roles = Roles.AdministratorRole + ", " + Roles.MainModeratorRole + ", " + Roles.ModeratorRole)]
@inject IUniversityTreeTraversalService TraversalService
@inject IUniversityTreeManagementService ManagementService
@inject IFormFilesManagement FilesManagement
@inject IMaterialsService MaterialsService
@inject NavigationManager NavigationManager

    <div class="data-container">
        <Breadcrumbs BreadcrumbsItems="@_breadcrumbsItems" />

        <div class="home-content">
            <AcaCollection Items="_subjects">
                <ListItemTemplate>
                    <SubjectListItem Model="context" Modal="@ConfirmationDialog" OnDelete="OnDelete" />
                </ListItemTemplate>
            </AcaCollection>
            <NavLink href=@($"/Moderator/ModeratorPanel/UniversitiesStructureManagement/Universities/{UniversityId}/Departments/{DepartmentId}/Semesters/{SemesterId}/Subjects/Add") class="add-button">
                Dodaj
            </NavLink>
        </div>
    </div>

<ConfirmationDialog @ref="ConfirmationDialog">
    @ConfirmationDialog.InnerText
</ConfirmationDialog>

@code {
    [Parameter]
    public int UniversityId { get; set; }

    [Parameter]
    public int DepartmentId { get; set; }

    [Parameter]
    public int SemesterId { get; set; }

    private IReadOnlyCollection<SubjectViewModel> _subjects;
    private const string pageTitle = "Przedmioty";
    private ConfirmationDialog ConfirmationDialog;
    private IReadOnlyCollection<BreadcrumbViewModel> _breadcrumbsItems;
    private BLL.Models.Department _department;
    private BLL.Models.Semester _semester;

    protected override void OnInitialized()
    {
        ChangePageTitle(pageTitle);

        _department = TraversalService.GetDepartment(DepartmentId);
        if (_department == null)
        {
            NavigationManager.NavigateTo($"ResourceNotFound/{Errors.DepartmentNotFound}");
        }

        var university = _department.University;
        if (university.UniversityId != UniversityId)
        {
            NavigationManager.NavigateTo($"ResourceNotFound/{Errors.UniversityNotFound}");
        }

        _semester = TraversalService.GetSemester(SemesterId);
        if (_semester == null)
        {
            NavigationManager.NavigateTo($"ResourceNotFound/{Errors.SemesterNotFound}");
        }

        _breadcrumbsItems = new List<BreadcrumbViewModel>
        {
            new BreadcrumbViewModel("Uczelnie", "/Moderator/ModeratorPanel/UniversitiesStructureManagement/Universities"),
            new BreadcrumbViewModel(university.Abbreviation, $"/Moderator/ModeratorPanel/UniversitiesStructureManagement/Universities/{UniversityId}/Departments"),
            new BreadcrumbViewModel(_department.Abbreviation, $"/Moderator/ModeratorPanel/UniversitiesStructureManagement/Universities/{UniversityId}/Departments/{DepartmentId}/Semesters"),
            new BreadcrumbViewModel(_semester.Number)
        };

        RefreshData();
    }

    private void RefreshData()
    {
        _subjects = TraversalService.GetLessons(_semester, _department)
            .Select(u => new SubjectViewModel
            {
                LessonId = u.LessonId,
                SemesterId = u.SemesterId,
                DepartmentId = u.DepartmentId,
                UniversityId = UniversityId,
                TitleOrFullName = u.Subject.Name,
                SubtitleOrAbbreviation = u.Subject.Abbreviation,
                MaterialsCount = u.MaterialsCount
            })
            .ToList();
    }

    private void OnDelete(CallbackArgs callbackArgs)
    {
        var lessonToDelete = TraversalService.GetLesson(callbackArgs.Id);

        // First - delete materials due to database constraints betwee Lesson and Material
        foreach (var material in lessonToDelete.Materials)
        {
            FilesManagement.DeleteWholeMaterialFolder(material.MaterialId);
            MaterialsService.DeleteMaterial(material);
        }

        // actually delete
        ManagementService.DeleteLesson(lessonToDelete.LessonId);

        RefreshData();
    }

    [CascadingParameter]
    public Action<string> ChangePageTitle { get; set; }
}