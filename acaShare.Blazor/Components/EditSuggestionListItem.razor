<NavLink class="item-link" href=@($"/Moderator/ModeratorPanel/EditSuggestions/EditRequestApprovalDecision/{Suggestion.EditRequestId}")>
    <span class="path-list-item-title">@Suggestion.MaterialName</span>
    <br>
    <span class="path-list-item-subtitle">
        @Suggestion.RequestDate.ToString("d.MM.yyyy, HH:mm") &nbsp;&nbsp;~&nbsp;&nbsp;

        @if (Suggestion.Summary?.Length > maxCommentLength)
        {
            @Suggestion.Summary.Substring(0, maxCommentLength);
            @:[...]
        }
        else if (Suggestion.Summary?.Length > 0)
        {
            @Suggestion.Summary;
        }
        else
        {
            @:Autor: @Suggestion.UpdaterName nie dołączył dodatkowego wyjaśnienia.
        }
    </span>
</NavLink>

<div class="icons-row-container">
    <a class="approve-edit-request" @onclick="OnApproveClick">
        <i class="material-icons list-icon icon-edit tooltipped" data-position="top" data-tooltip="Zatwierdź - usuń materiał">check</i>
    </a>
    <a @onclick="ToggleModal">
        <i class="material-icons list-icon icon-delete tooltipped" data-position="top" data-tooltip="Odrzuć sugestię">not_interested</i>
    </a>
</div>

<EditModelModal Model="Suggestion" SubmitButtonText="Odrzuć sugestię usunięcia" OnValidSubmit="OnRejectClick" @ref="EditModal">
    <div class="row">
        <div class="col s12">
            <div>
                <label for="Suggestion.DeclineReason">Powód odrzucenia sugestii</label>
                <div class="input-field">
                    <InputText @bind-Value="Suggestion.DeclineReason" class="validate" />
                    <ValidationMessage For="@(() => Suggestion.DeclineReason)" />
                </div>
            </div>
        </div>
    </div>
</EditModelModal>


@code {
    [Parameter]
    public EditRequestViewModel Suggestion { get; set; }

    [Parameter]
    public ConfirmationDialog ConfirmationModal { get; set; }

    //Callbacks
    [Parameter]
    public EventCallback<CallbackArgs> OnApproveSuggestionClickCallback { get; set; }

    [Parameter]
    public EventCallback<RejectSuggestionCallbackArgs> OnRejectSuggestionClickCallback { get; set; }

    private EditModelModal<EditRequestViewModel> EditModal { get; set; }

    private const int maxCommentLength = 100;

    private void OnApproveClick()
    {
        ConfirmationModal.OnSubmit += () => OnApproveSuggestionClickCallback.InvokeAsync(new CallbackArgs(Suggestion.EditRequestId));
        ConfirmationModal.ToggleModal();
    }

    private void OnRejectClick()
    {
        OnRejectSuggestionClickCallback.InvokeAsync(new RejectSuggestionCallbackArgs(Suggestion.EditRequestId, Suggestion.DeclineReason));
    }

    private void ToggleModal()
    {
        Suggestion.DeclineReason = null;
        EditModal.ToggleModal();
    }
}