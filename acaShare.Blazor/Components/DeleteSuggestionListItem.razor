@inject IJSRuntime JsRuntime

@{
    var smaller = string.Empty;
    var deleteReasonIcon = string.Empty;

    switch (Suggestion.ReasonId)
    {
        case 1:
            deleteReasonIcon = "warning";
            break;
        case 2:
            smaller = "smaller";
            deleteReasonIcon = "pan_tool";
            break;
        case 3:
            deleteReasonIcon = "receipt"; // thumb_down thumbs_up_down
            break;
        case 4:
            deleteReasonIcon = "location_off";
            break;
        case 5:
            deleteReasonIcon = "feedback";
            break;
    }
}

<i class="material-icons list-icon change-request-type-icon tooltipped @smaller" data-position="top" data-tooltip="@Suggestion.Reason">
    @deleteReasonIcon
</i>
<NavLink class="item-link" href=@($"/Moderator/ModeratorPanel/DeleteSuggestions/DeleteRequestApprovalDecision/{Suggestion.DeleteRequestId}")>
    <span class="path-list-item-title">@Suggestion.MaterialName</span>
    <br>
    <span class="path-list-item-subtitle">
        @Suggestion.RequestDate.ToString("d.MM.yyyy, HH:mm") &nbsp;&nbsp;~&nbsp;&nbsp;

        @if (Suggestion.AdditionalComment?.Length > maxCommentLength)
        {
            @Suggestion.AdditionalComment.Substring(0, maxCommentLength);
            @:[...]
        }
        else if (Suggestion.AdditionalComment?.Length > 0)
        {
            @Suggestion.AdditionalComment;
        }
        else
        {
            @:Autor: @Suggestion.DeleterName nie dołączył dodatkowego wyjaśnienia.
        }
    </span>
</NavLink>

<div class="icons-row-container">
    <a class="approve-delete-request" @onclick="() => OnApproveSuggestionClickCallback.InvokeAsync(new CallbackArgs(Suggestion.DeleteRequestId))">
        <i class="material-icons list-icon icon-edit tooltipped" data-position="top" data-tooltip="Zatwierdź - usuń materiał">delete_forever</i>
    </a>
    <a @*@onclick="ToggleModal"*@>
        <i class="material-icons list-icon icon-delete tooltipped" data-position="top" data-tooltip="Odrzuć sugestię">not_interested</i>
    </a>
</div>

<EditModelModal Model="Suggestion" SubmitButtonText="Odrzuć sugestię usunięcia" OnValidSubmit="OnRejectClicked">
    <div class="row">
        <div class="col s12">
            <div>
                <label for="Suggestion.DeclineReason">Powód odrzucenia sugestii</label>
                <div class="input-field">
                    <InputText @bind-Value="Suggestion.DeclineReason" class="validate" />
                    <ValidationMessage For="@(() => Suggestion.DeclineReason)" />
                </div>
            </div>
        </div>
    </div>
</EditModelModal>

@code {
    [Parameter]
    public DeleteRequestViewModel Suggestion { get; set; }

    private const int maxCommentLength = 100;

    private void OnRejectClicked()
    {
        OnRejectSuggestionClickCallback.InvokeAsync(new RejectSuggestionCallbackArgs(Suggestion.DeleteRequestId, Suggestion.DeclineReason));
    }

    //Callbacks
    [Parameter]
    public EventCallback<CallbackArgs> OnApproveSuggestionClickCallback { get; set; }

    [Parameter]
    public EventCallback<RejectSuggestionCallbackArgs> OnRejectSuggestionClickCallback { get; set; }

    [CascadingParameter]
    public Action<string> ChangePageTitle { get; set; }
}