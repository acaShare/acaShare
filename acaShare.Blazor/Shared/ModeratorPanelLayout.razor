@inherits LayoutComponentBase
@layout MainLayout
@inject IJSRuntime JsRuntime

<div class="col s12 m5 l3 home-part moderator-actions-container">
    <div class="data-container">
        <nav class="colornav">
            <div class="nav-wrapper path-header-wrapper">
                <div class="col s12 tree-path">
                    Akcje
                </div>
            </div>
        </nav>

        <div class="home-content">
            <ul id="moderator-actions" class="moderator-actions">
                @foreach (var page in _pages)
                {
                    <li class="moderator-actions-item">
                        <NavLink class="moderator-actions-item-link" href=@($"/Moderator/ModeratorPanel/{page.Key}")
                                 @onclick="@(() => ChangePageTitle(page.Value))"
                                 ActiveClass="moderator-actions-item-active">
                            @(page.Value)
                        </NavLink>
                    </li>
                }
            </ul>
        </div>
    </div>
</div>

<div class="col s12 m7 l9 home-part">
    <CascadingValue Value="ChangePageTitle" TValue="Action<string>">
        @Body
    </CascadingValue>
</div>

@code {
    private static readonly IDictionary<string, string> _pages = new Dictionary<string, string>
    {
        { "MaterialsToApprove", "Materiały oczekujące na zatwierdzenie" },
        { "EditSuggestions", "Sugestie edycji" },
        { "DeleteSuggestions", "Sugestie usunięcia" },
        { "Universities", "Zarządzaj strukturą uczelni" },
        { "ModeratorManagement", "Zarządzaj moderatorami" },
        { "Statistics", "Statystyki" },
        { "Regulations", "Regulamin" },
    };

    private static string _currentPageName = _pages["MaterialsToApprove"];

    public void ChangePageTitle(string pageName)
    {
        _currentPageName = pageName;
        JsRuntime.InvokeVoidAsync(JsFunctions.SetDocumentTitle, pageName);
    }
}
