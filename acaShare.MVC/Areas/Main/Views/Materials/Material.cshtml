@using acaShare.ServiceLayer.Interfaces;
@using System.Security.Claims;
@model acaShare.MVC.Areas.Main.Models.Materials.MaterialViewModel

@section MaterialViewCSS {
    <link rel="stylesheet" href="~/css/materials/material.css">
    <link rel="stylesheet" href="~/css/materials/material-images-modal.css">
}

@section Scripts {
    <script src="~/js/material-images-modal.js"></script>
}

@section SidebarWithComments {
    @{
        int materialId = Model.MaterialId;
    }

    <div id="sidebar" class="col s12 m4 l3 right-side-bar">
        <ul id="tabs-swipe-demo" class="tabs tabs-fixed-width">
            <li class="tab"><a href="#test-swipe-1">Ulubione</a></li>
            <li class="tab"><a href="#test-swipe-2">Ostatnia aktywność</a></li>
            <li class="tab"><a class="active" href="#test-swipe-3">Komentarze</a></li>
        </ul>
    </div>
    <script>
            window.addEventListener('load', () => {
                let xhr = new XMLHttpRequest();
                xhr.onload = () => {
                    if (xhr.readyState === 4 && xhr.status === 200) {
                        let div = document.createElement('div');
                        div.innerHTML = xhr.responseText;
                        document.getElementById('sidebar').appendChild(div);
                        $('.tabs').tabs();
                    }
                };

                xhr.open("GET", `/Main/Test/Invoke?materialId=@materialId&loggedUserId=@User.FindFirstValue(ClaimTypes.NameIdentifier)`, true);
                xhr.send();
            });
    </script>

    @*@await Component.InvokeAsync("Sidebar", new { @materialId = materialId, @loggedUserId = User.FindFirstValue(ClaimTypes.NameIdentifier) })*@
}

<div class="material-container">
    <header class="material-header">
        <h1 class="material-header-title">
            @Html.DisplayFor(model => model.Name)
        </h1>

        <div class="material-header-action-buttons">
            @{
                var favoriteIcon = "star_border";
                if (Model.IsFavorite)
                {
                    favoriteIcon = "star";
                }
            }

            <a asp-action="ToggleFavorites" asp-route-materialId="@Model.MaterialId"
               class="sep action-button tooltipped" data-position="top" data-tooltip="Dodaj do ulubionych">
                <i class="material-icons lh">@favoriteIcon</i>
            </a>

            @if (Model.IsAllowedToEditOrDelete)
            {
                <a asp-action="Edit" asp-route-materialId="@Model.MaterialId"
                   class="sep action-button tooltipped" data-position="top" data-tooltip="Edytuj">
                    <i class="material-icons lh">edit</i>
                </a>
                <a asp-action="Delete" asp-route-materialId="@Model.MaterialId"
                   class="sep action-button tooltipped" data-position="top" data-tooltip="Usuń">
                    <i class="material-icons lh">delete</i>
                </a>
            }
            else
            {
                <a asp-action="CreateEditSuggestion" asp-route-materialId="@Model.MaterialId"
                   class="sep action-button tooltipped" data-position="top" data-tooltip="Sporządź sugestię edycji">
                    <i class="material-icons lh">tune</i>
                </a>
                <a asp-action="CreateDeleteSuggestion" asp-route-materialId="@Model.MaterialId"
                   class="sep action-button tooltipped" data-position="top" data-tooltip="Sporządź sugestię usunięcia">
                    <i class="material-icons lh">delete_sweep</i>
                </a>
            }
        </div>
    </header>

    <div class="material-content">
        <section class="material-content-files">
            <h2 class="material-content-files-header">Pliki</h2>

            <div class="files-wrapper">
                @{
                    int i = 1;
                    foreach (var file in Model.Files)
                    {
                        if (file.IsImage)
                        {
                            <div class="material-file material-image" onclick="openModal();currentSlide(@(i++))">
                                <img src="~/_Uploads/@file.RelativePath" alt="@file.FileName-thumbnail" />
                            </div>
                        }
                        else
                        {
                            <div class="material-file">
                                <a href="~/_Uploads/@file.RelativePath" download="@file.FileName" class="material-file-download">
                                    <i class="material-icons">description</i>
                                </a>
                            </div>
                        }
                    }
                }
            </div>

            <!-- The Modal/Lightbox -->
            <div id="gallery-modal" class="gallery-modal" onclick="closeModalOnBackgroundClick(event)">
                <div id="current-slide-info" class="current-slide-info"></div>
                <span class="close" onclick="closeModal()">&times;</span>
                <div class="modal-content">
                    @foreach (var file in Model.Files)
                    {
                        if (file.IsImage)
                        {
                            <div class="gallery-item">
                                <img src="~/_Uploads/@file.RelativePath" alt="@file.FileName" />
                            </div>
                        }
                    }
                </div>

                <!-- Next/previous controls -->
                <a class="prev" onclick="plusSlides(-1)">&#10094;</a>
                <a class="next" onclick="plusSlides(1)">&#10095;</a>
            </div>
        </section>

        <section>
            <h2 class="material-content-description-header">
                @Html.DisplayNameFor(model => model.Description)
            </h2>

            <div class="material-content-description">
                @Html.DisplayFor(model => model.Description)
            </div>
        </section>
    </div>

    <footer class="material-footer">
        <p class="material-footer-content">
            <span>
                @Html.DisplayNameFor(model => model.CreatorUsername): @Html.DisplayFor(model => model.CreatorUsername)
            </span>

            <span>
                @{ var uploadDate = Model.UploadDate.ToString("d MMMM yyyy, HH:mm");}
                @Html.DisplayNameFor(model => model.UploadDate): @Html.DisplayFor(model => uploadDate)
            </span>

            @{
                var res = Enum.TryParse(Model.State, out MaterialStateEnum materialState);
            }
            @switch (materialState)
            {
                case MaterialStateEnum.PENDING:
                    <span>
                        Status: Oczekujący na zatwierdzenie
                    </span>
                    break;
                case MaterialStateEnum.APPROVED:
                    <span>
                        Zatwierdzony przez: @Html.DisplayFor(model => model.ApproverUsername)
                    </span>
                    break;
                case MaterialStateEnum.REJECTED:
                    <span>
                        Odrzucony przez: @Html.DisplayFor(model => model.ApproverUsername)
                    </span>
                    break;
            }

            @if (Model.ModificationDate != null)
            {
                <span>
                    @Html.DisplayNameFor(model => model.ModificationDate):

                    @{ var modificationDate = Model.ModificationDate.Value.ToString("d MMMM yyyy, HH:mm"); }

                    @Html.DisplayFor(model => modificationDate) @Html.DisplayNameFor(model => model.UpdaterUsername)
                    @Html.DisplayFor(model => model.UpdaterUsername)
                </span>
            }
        </p>
    </footer>
</div>