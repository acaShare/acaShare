@using acaShare.ServiceLayer.Interfaces
@model acaShare.MVC.Areas.Main.Models.Materials.MaterialViewModel

@section MaterialViewCSS {
    <link rel="stylesheet" href="~/css/material.css">
}

@section SidebarWithComments {
    @{
        int materialId = Model.MaterialId;
    }
    @await Component.InvokeAsync("Sidebar", new { @materialId = materialId })
}

<div class="material-container">
    <header class="material-header">
        <h1 class="material-header-title">
            @Html.DisplayFor(model => model.Name)
        </h1>

        <div class="material-header-action-buttons">
            @{ var favoriteIcon = "star_border"; }
            @if (Model.IsFavorite)
            {
                favoriteIcon = "star";
            }
            <a href="edit.html" class="sep action-button"><i class="material-icons lh">@favoriteIcon</i></a>
            <a href="edit.html" class="sep action-button"><i class="material-icons lh">edit</i></a> <!-- przekierowanie do pliku z edycją i wysłaniem sugestii edycji -->
            <a href="delete.html" class="action-button"><i class="material-icons lh">delete</i></a> <!-- przekierowanie do pliku z wysłaniem sugestii usunięcia -->
        </div>
    </header>

    <div class="material-content">
        <section class="material-content-files">
            <h2 class="material-content-files-header">Pliki</h2>
            file1, file2
            @*@foreach (var file in Files)
                {

                }*@
        </section>

        <section>
            <h2 class="material-content-description-header">
                Opis
            </h2>

            <div class="material-content-description">
                @Html.DisplayFor(model => model.Description)
            </div>
        </section>
    </div>

    <footer class="material-footer">
        <p class="material-footer-content">
            <span class="test">
                Autor: @Html.DisplayFor(model => model.Creator.Username)
            </span>

            <span class="test">
                @{ var uploadDate = Model.UploadDate.ToString("d MMMM yyyy, HH:mm");}
                Dodano: @Html.DisplayFor(model => uploadDate)
            </span>

            @{
                var res = Enum.TryParse(Model.State, out MaterialStateEnum materialState);
                var newClass = "test2";
                @if (Model.ModificationDate != null)
                {
                    newClass = "test";
                }
            }
            @switch (materialState)
            {
                case MaterialStateEnum.PENDING:
                    <span class="@newClass">
                        Status: Oczekujący na zatwierdzenie
                    </span>
                    break;
                case MaterialStateEnum.APPROVED:
                    <span class="@newClass">
                        Zatwierdzony przez: @Html.DisplayFor(model => model.Approver.Username)
                    </span>
                    break;
                case MaterialStateEnum.REJECTED:
                    <span class="@newClass">
                        Odrzucony przez: @Html.DisplayFor(model => model.Approver.Username)
                    </span>
                    break;
            }

            @if (Model.ModificationDate != null)
            {
                <span class="@newClass">
                    @Html.DisplayNameFor(model => model.ModificationDate):

                    @{var modificationDate = Model.ModificationDate.Value.ToString("d MMMM yyyy, HH:mm");}
                    @Html.DisplayFor(model => modificationDate);
                </span>

                <span class="@newClass">
                    Zmodyfikowany przez: @Html.DisplayFor(model => model.Updater.Username);
                </span>
            }
        </p>
    </footer>
</div>